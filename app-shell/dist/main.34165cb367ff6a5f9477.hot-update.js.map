{"version":3,"file":"main.34165cb367ff6a5f9477.hot-update.js","sources":["webpack:///./src/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { createInstance, useGlobalState, useAction, Piral, SetComponent, SetRoute, } from 'piral-core';\r\nimport { createMenuApi } from 'piral-menu';\r\nimport { createFeedsApi } from 'piral-feeds';\r\nimport { createFormsApi } from 'piral-forms';\r\nimport { createNotificationsApi } from 'piral-notifications';\r\nimport { createDashboardApi, Dashboard } from 'piral-dashboard';\r\nimport { createContainersApi } from 'piral-containers';\r\nimport { createSearchApi, useSearch } from 'piral-search';\r\ncustomElements.define('pi-spinner', class extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n    connectedCallback() {\r\n        this.classList.add('spinner', 'circles');\r\n    }\r\n});\r\nconst Loader = () => (React.createElement(\"div\", { className: \"app-center\" },\r\n    React.createElement(\"pi-spinner\", null, \"Loading ...\")));\r\nconst Sitemap = () => {\r\n    const pages = useGlobalState((s) => s.registry.pages);\r\n    return (React.createElement(\"ul\", null,\r\n        React.createElement(\"li\", null,\r\n            React.createElement(Link, { to: \"/\" }, \"Go to /\")),\r\n        Object.keys(pages)\r\n            .map((url) => url.replace(':id', `${~~(Math.random() * 1000)}`))\r\n            .map((url) => (React.createElement(\"li\", { key: url },\r\n            React.createElement(Link, { to: url },\r\n                \"Go to \",\r\n                url)))),\r\n        React.createElement(\"li\", null,\r\n            React.createElement(Link, { to: \"/sitemap\" }, \"Go to /sitemap\")),\r\n        React.createElement(\"li\", null,\r\n            React.createElement(Link, { to: \"/not-found\" }, \"Go to /not-found\"))));\r\n};\r\nconst Menu = () => {\r\n    const menuItems = useGlobalState((s) => s.registry.menuItems);\r\n    return (React.createElement(\"ul\", { className: \"app-nav\" },\r\n        React.createElement(\"li\", null,\r\n            React.createElement(Link, { to: \"/\" }, \"Home\")),\r\n        Object.keys(menuItems).map((name) => {\r\n            const item = menuItems[name];\r\n            if (item.settings.type === 'general') {\r\n                const Component = item.component;\r\n                return (React.createElement(\"li\", { key: name },\r\n                    React.createElement(Component, null)));\r\n            }\r\n            return undefined;\r\n        }),\r\n        React.createElement(\"li\", null,\r\n            React.createElement(Link, { to: \"/sitemap\" }, \"Sitemap\"))));\r\n};\r\nconst SearchResults = () => {\r\n    const { loading, items } = useGlobalState((m) => m.search.results);\r\n    return (React.createElement(\"div\", { className: \"search-results\" },\r\n        items.map((item, i) => (React.createElement(\"div\", { className: \"search-results-item\", key: i }, item))),\r\n        loading && (React.createElement(\"div\", { className: \"search-results-loading\" },\r\n            React.createElement(Loader, null)))));\r\n};\r\nconst SearchForm = () => {\r\n    const [value, setValue] = useSearch();\r\n    const search = useAction('triggerSearch');\r\n    return (React.createElement(\"form\", { className: \"search\", onSubmit: (ev) => {\r\n            search(value, true);\r\n            return ev.preventDefault();\r\n        } },\r\n        React.createElement(\"input\", { type: \"search\", placeholder: \"Search\", onChange: (e) => setValue(e.target.value), value: value }),\r\n        React.createElement(SearchResults, null)));\r\n};\r\nconst Notifications = () => {\r\n    const notifications = useGlobalState((s) => s.notifications);\r\n    return (React.createElement(\"div\", { className: \"app-notifications\" }, notifications.map(({ id, close, options, component: Component }) => (React.createElement(\"div\", { className: `notification ${options.type || 'info'}`, key: id },\r\n        React.createElement(\"div\", { className: \"notification-content\" },\r\n            options.title && React.createElement(\"div\", { className: \"notification-title\" }, options.title),\r\n            React.createElement(\"div\", { className: \"notification-message\" },\r\n                React.createElement(Component, { onClose: close, options: options }))),\r\n        React.createElement(\"div\", { className: \"notification-close\", onClick: close }, \"close\"))))));\r\n};\r\nconst Layout = ({ children }) => {\r\n    const layout = useGlobalState((s) => s.app.layout);\r\n    return (React.createElement(\"div\", { className: \"app-container\" },\r\n        React.createElement(\"div\", { className: \"app-header\" },\r\n            React.createElement(\"h1\", null,\r\n                \"Appshell Main Application (\",\r\n                layout,\r\n                \")\")),\r\n        React.createElement(\"div\", { className: \"app-content\" }, children),\r\n        React.createElement(\"div\", { className: \"app-footer\" },\r\n            \"For more information or the source code check out our\",\r\n            ' ',\r\n            React.createElement(\"a\", { href: \"https://github.com/smapiot/piral\" }, \"GitHub repository\"),\r\n            \".\"),\r\n        React.createElement(Notifications, null)));\r\n};\r\nconst instance = createInstance({\r\n    plugins: [\r\n        createMenuApi(),\r\n        createNotificationsApi(),\r\n        createContainersApi(),\r\n        createDashboardApi(),\r\n        createFeedsApi(),\r\n        createFormsApi(),\r\n        createSearchApi(),\r\n    ],\r\n    requestPilets() {\r\n        return fetch('http://localhost:9001/api/v1/pilet')\r\n            .then((res) => res.json())\r\n            .then((res) => res.items);\r\n    },\r\n});\r\nconst app = (React.createElement(Piral, { instance: instance },\r\n    React.createElement(SetComponent, { name: \"Layout\", component: Layout }),\r\n    React.createElement(SetRoute, { path: \"/\", component: Dashboard })));\r\nrender(app, document.querySelector('#app'));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAJA;AAAA;AAAA;AAKA;AACA;AANA;AACA;AADA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAKA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AACA;AASA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAdA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}